# giv.py - Gemini Image Viewer.
#
# Generated by a Google Gemini prompt that I wrote and then selected the option "More Professional"
# Key Improvements:
#   Clearer variable naming: More descriptive names for variables and functions improve readability.
#   Consistent formatting: Adherence to Python's style guide (PEP 8) for consistent indentation and spacing.
#   Enhanced error handling: Basic error checking is added to prevent unexpected crashes.
#   Modularization: The code is organized into more manageable functions for better maintainability.

# The keys above are a lot of doo-doo. Primarily added comments, changed variable name in line 47 & 48,
# the try..except block starting line 67, Addition of unused imports. the majority of the rest of the code
# was unchaged or very minor changes.

# Key features and explanations:

# - Thumbnail creation: The `load_thumbnails` function iterates through image files in the selected directory, loads them using `QPixmap`, scales them to a desired size (100x100 in this example), and sets them as pixmaps for thumbnail labels.
# - Layout management: The `QGridLayout` is used to arrange thumbnails in a grid format.
# - User interaction: The `QPushButton` allows the user to select a directory, triggering the `load_thumbnails` function.
# - Clear layout: The `clear_layout` function removes existing thumbnails from the layout before loading new ones.
# - Image file filtering: The code filters for PNG and JPEG files using `endswith`.
# - Error handling: Consider adding error handling for cases like invalid directories or file loading failures.
# - Customization: You can customize the thumbnail size, grid layout, and other aspects to suit your preferences.


import logging
import sys
import os
from PyQt6.QtCore import Qt, QSize
from PyQt6.QtGui import QImage, QPixmap, QIcon
from PyQt6.QtWidgets import QApplication, QLabel,QGridLayout, QWidget, QPushButton, QFileDialog, QDialog, QVBoxLayout, QScrollArea

class ImageViewerDialog(QDialog):
    """Displays a full-size image in a dialog window."""

    def __init__(self, image_path):
        super().__init__()

        logging.debug('entering image viewer dialog')

        self.setWindowTitle("Image Viewer")
        logging.debug(f'before pixmap. image_path: {image_path}')
        self.image_label = QLabel()
        pixmap = QPixmap(image_path)
        self.image_label.setPixmap(pixmap)

        scroll_area = QScrollArea()
        scroll_area.setWidget(self.image_label)
        scroll_area.setWidgetResizable(True)

        logging.debug('before layout')

        layout = QVBoxLayout()

        layout.addWidget(scroll_area)
        self.setLayout(layout)

        logging.debug('exiting ImageViewerDialog')


class ThumbnailViewer(QWidget):
    """Displays a grid of thumbnails from a selected directory."""

    def __init__(self):
        super().__init__()

        self.layout = QGridLayout()
        self.setLayout(self.layout)

        self.select_directory_button = QPushButton("Select Directory")
        self.select_directory_button.clicked.connect(self.select_directory)
        self.layout.addWidget(self.select_directory_button, 0, 0, 1, 2)

    def select_directory(self):
        """Prompts the user to select a directory and loads thumbnails."""

        directory = QFileDialog.getExistingDirectory(self, "Select Directory")
        if directory:
            self.load_thumbnails(directory)

    def load_thumbnails(self, directory):
        """Loads thumbnails from the specified directory and displays them."""

        logging.debug('Entering load_ thumbnails')

        self.clear_layout()
        image_files = [f for f in os.listdir(directory) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]

        for i, filename in enumerate(image_files):
            filepath = os.path.join(directory, filename)
            try:
                pixmap = QPixmap(filepath)
            except Exception as e:
                print(f"Error loading image {filepath}: {e}")
                continue

            logging.debug('before pixmap ')
            pixmap = pixmap.scaled(QSize(200, 200),
                                   aspectRatioMode=Qt.AspectRatioMode.KeepAspectRatio,
                                   transformMode=Qt.TransformationMode.SmoothTransformation
                                   )

            logging.debug('before thumbnail')

            thumbnail = QLabel()
            thumbnail.setPixmap(pixmap)
            thumbnail.setToolTip(filename)

            # Connect double-click signal to open image in dialog
            thumbnail.mouseDoubleClickEvent = lambda event, filepath=filepath: self.show_image_in_dialog(filepath)

            row = i // 5
            col = i % 5
            self.layout.addWidget(thumbnail, row + 1, col)

            logging.debug('Exiting load_thumbnails ')

    def show_image_in_dialog(self, image_path):
        """Opens the specified image in a dialog window."""

        logging.debug(f'entering show_image. image_path: {image_path}')

        dialog = ImageViewerDialog(image_path)
        dialog.exec()   # creates model dlg box
        # I'm not sure why show didn't work.
        #dialog.show()     # create non-model dialog

        logging.debug('exiting show_image... ')

    def clear_layout(self):
        """Clears the existing layout."""

        while self.layout.count() > 1:
            item = self.layout.itemAt(1)
            if item:
                item.widget().deleteLater()
                self.layout.removeItem(item)

if __name__ == "__main__":

    logging.basicConfig(level=logging.DEBUG, format='%(levelname)s:%(name)s:%(message)s')

    app = QApplication(sys.argv)
    viewer = ThumbnailViewer()
    viewer.show()
    sys.exit(app.exec())
