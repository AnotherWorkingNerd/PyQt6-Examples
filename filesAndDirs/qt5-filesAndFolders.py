
# this is from https://learndataanalysis.org/create-an-app-to-view-folders-and-files-pyqt5-tutorial/
# https://www.youtube.com/watch?v=1i-7vlxeiwI - PyQt5 Tutorial | Create an application to view folders and files (code included)
#


import sys
from PyQt5.QtWidgets import QApplication, QWidget, QTreeView, QFileSystemModel, QVBoxLayout
from PyQt5.QtCore import QModelIndex

class FileSystemView(QWidget):
	def __init__(self, dir_path):
		super().__init__()
		appWidth = 800
		appHeight = 300
		self.setWindowTitle('File System Viewer')
		self.setGeometry(300, 300, appWidth, appHeight)

		self.model = QFileSystemModel()
		self.model.setRootPath(dir_path)
		self.tree =  QTreeView()
		self.tree.setModel(self.model)
		self.tree.setRootIndex(self.model.index(dirPath))
		self.tree.setColumnWidth(0, 250)
		self.tree.setAlternatingRowColors(True)

		layout = QVBoxLayout()
		layout.addWidget(self.tree)
		self.setLayout(layout)

if __name__ == '__main__':
	app = QApplication(sys.argv)
	dirPath = r'<Your directory>'
	demo = FileSystemView(dirPath)
	demo.show()
	sys.exit(app.exec_())

# =============== another Qt5 example generated by chatgpt
# I found this at https://github.com/grafmar/treeView

import sys
from PyQt5.QtCore import QDir
from PyQt5.QtWidgets import QApplication, QFileSystemModel, QTreeView, QWidget, QVBoxLayout, QHBoxLayout, QFileDialog, QLabel, QPushButton, QCheckBox


        # Create a file system model
        self.model = QFileSystemModel()

        # Only display directories in the tree view by default
        self.model.setFilter(QDir.AllDirs | QDir.NoDotAndDotDot)

        # Create a tree view widget
        self.tree_view = QTreeView()

        layout = QVBoxLayout()

        layout.addWidget(self.tree_view)
        self.setLayout(layout)

        # Initialize the file system model and tree view to show all available drives
        self.model.setRootPath('')
        self.tree_view.setModel(self.model)
        self.tree_view.setRootIndex(self.model.index(''))
        self.tree_view.setSortingEnabled(True)

        # Set the size of the first column of the tree view to 450 pixels
        self.tree_view.header().resizeSection(0, 450)

        # Resize the widget to the desired size
        self.resize(800, 480)

    def select_directory(self):
        # Show a directory dialog to select a directory
        dir_path = QFileDialog.getExistingDirectory(self, "Select Directory")

        if dir_path:
            # Update the file system model and tree view with the new directory path
            self.model.setRootPath(dir_path)
            self.tree_view.setModel(self.model)
            self.tree_view.setRootIndex(self.model.index(dir_path))
            # Update the path label with the selected directory path
            self.path_label.setText(f"Selected Path: {dir_path}")
